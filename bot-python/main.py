import asyncio
import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F
from datetime import datetime, timedelta

# üîê –¢–µ–ª–µ–≥—Ä–∞–º-—Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TOKEN = "7156477479:AAEOJE5ge2QcgzOko9TazY96bsz_p1xy6uY"
CHAT_ID = 1057220053

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)

# üîÑ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
sent_notifications = set()
current_schedule = []
notifications_enabled = True

# üìÅ –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–æ–≤
CREDENTIALS_FILE = "user_data.json"

# üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


class LoginState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

# üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


def main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                              callback_data="show_schedule")],
        [InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                              callback_data="enable_notifications")],
        [InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                              callback_data="disable_notifications")],
        [InlineKeyboardButton(text="üîë –í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å",
                              callback_data="enter_credentials")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")]
    ])
    return keyboard


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


@dp.callback_query(F.data == "show_schedule")
async def show_schedule(callback: CallbackQuery):
    if not current_schedule:
        await callback.message.answer("üìå –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å'.")
        return
    text = "üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
    for lesson in current_schedule:
        text += (
            f"\nüìå {lesson['subject']}"
            f"\nüïí {lesson['start_time']} - {lesson['end_time']}"
            f"\nüë®‚Äçüè´ {lesson['teacher']}"
            f"\nüè¢ {lesson['location']}\n"
        )
    await callback.message.answer(text, parse_mode=ParseMode.MARKDOWN)


@dp.callback_query(F.data == "enable_notifications")
async def enable_notifications(callback: CallbackQuery):
    global notifications_enabled
    notifications_enabled = True
    await callback.message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")


@dp.callback_query(F.data == "disable_notifications")
async def disable_notifications(callback: CallbackQuery):
    global notifications_enabled
    notifications_enabled = False
    await callback.message.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")


@dp.callback_query(F.data == "about_bot")
async def about_bot(callback: CallbackQuery):
    text = (
        "‚ÑπÔ∏è *–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π!*\n\n"
        "‚úÖ –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞.\n"
        "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π."
    )
    await callback.message.answer(text, parse_mode=ParseMode.MARKDOWN)


@dp.callback_query(F.data == "enter_credentials")
async def process_cred_button(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(LoginState.waiting_for_login)


@dp.message(LoginState.waiting_for_login)
async def get_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("üîí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(LoginState.waiting_for_password)


@dp.message(LoginState.waiting_for_password)
async def get_password(message: Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data['login']
    password = message.text
    user_id = str(message.from_user.id)

    if os.path.exists(CREDENTIALS_FILE):
        with open(CREDENTIALS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = {}

    # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON —Å –ø–æ–ª–µ–º id –∏ users
    data["id"] = user_id
    if "users" not in data:
        data["users"] = {}
    data["users"][user_id] = {"username": login, "password": password}

    with open(CREDENTIALS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    await message.answer("‚úÖ –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.clear()


async def send_notifications():
    global notifications_enabled
    while True:
        if notifications_enabled and current_schedule:
            now = datetime.now().strftime('%Y-%m-%d %H:%M')
            for lesson in current_schedule:
                try:
                    if "start_time" not in lesson:
                        logging.warning(
                            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –£ –∑–∞–Ω—è—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç start_time.")
                        continue

                    notification_time = (datetime.strptime(
                        lesson["start_time"], '%Y-%m-%d %H:%M') - timedelta(minutes=10)).strftime('%Y-%m-%d %H:%M')
                    if notification_time == now and notification_time not in sent_notifications:
                        text = (
                            f"‚è≥ *–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ!*\n\n"
                            f"üìå {lesson['subject']}\n"
                            f"üïí {lesson['start_time']} - {lesson['end_time']}\n"
                            f"üë®‚Äçüè´ {lesson['teacher']}\n"
                            f"üè¢ {lesson['location']}"
                        )
                        await bot.send_message(CHAT_ID, text, parse_mode=ParseMode.MARKDOWN)
                        sent_notifications.add(notification_time)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await asyncio.sleep(60)


async def main():
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(send_notifications())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
