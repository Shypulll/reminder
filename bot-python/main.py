import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# üîê –¢–µ–ª–µ–≥—Ä–∞–º-—Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞
TOKEN = "7156477479:AAEOJE5ge2QcgzOko9TazY96bsz_p1xy6uY"
CHAT_ID = 1057220053

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîÑ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
sent_notifications = set()
current_schedule = []
user_credentials = {}  # –•—Ä–∞–Ω–∏–º –ª–æ–≥–∏–Ω—ã –∏ –ø–∞—Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# üîß –ü—É—Ç—å –∫ ChromeDriver
CHROMEDRIVER_PATH = "C:/Users/User/Downloads/chromedriver.exe"

# üåê URL –¥–Ω–µ–≤–Ω–∏–∫–∞
DIARY_URL = "https://mojeaeh.vizja.pl/vizja-stud-app/ledge/view/ImapLogin"

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é


def main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                              callback_data="show_schedule")],
        [InlineKeyboardButton(
            text="üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", callback_data="setup_login")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")],
        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton(
            text="üìú –§—É–Ω–∫—Ü–∏–∏", callback_data="functions_list")]
    ])
    return keyboard

# üìå –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é


@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫


@dp.callback_query(lambda callback: callback.data in ["show_schedule", "setup_login", "about_bot", "functions_list"])
async def callback_handler(callback: CallbackQuery):
    if callback.data == "show_schedule":
        await show_schedule(callback)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif callback.data == "setup_login":
        await setup_login(callback)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif callback.data == "about_bot":
        await about_bot(callback)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    elif callback.data == "functions_list":
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ
        await functions_list(callback)

# üìå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è


async def show_schedule(callback: CallbackQuery):
    global current_schedule
    if not current_schedule:
        await callback.message.answer("üìå –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
        return
    text = "üìÖ *–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
    for lesson in current_schedule:
        text += (
            f"\nüìå {lesson['subject']}"
            f"\nüïí {lesson['start_time']} - {lesson['end_time']}"
            f"\nüë®‚Äçüè´ {lesson['teacher']}"
            f"\nüè¢ {lesson['location']}\n"
        )
    await callback.message.answer(text, parse_mode=ParseMode.MARKDOWN)

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏–Ω–∞


async def setup_login(callback: CallbackQuery):
    await callback.message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    user_credentials[CHAT_ID] = [None, None]

# üìå –û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞


async def about_bot(callback: CallbackQuery):
    text = (
        "‚ÑπÔ∏è *–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π!*\n\n"
        "‚úÖ –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞.\n"
        "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π."
    )
    await callback.message.answer(text, parse_mode=ParseMode.MARKDOWN)

# üìå –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (–Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞)


async def functions_list(callback: CallbackQuery):
    text = (
        "üìú *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π:*\n\n"
        "‚úÖ /start ‚Äì –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "‚úÖ /schedule ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.\n"
        "‚úÖ /login ‚Äì –í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
        "‚úÖ /help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥.\n"
        "‚úÖ /about ‚Äì –û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\n"
        "‚öôÔ∏è –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º!"
    )
    await callback.message.answer(text, parse_mode=ParseMode.MARKDOWN)

# üìå –û–ë–†–ê–ë–û–¢–ß–ò–ö –õ–Æ–ë–´–• –î–†–£–ì–ò–• –°–û–û–ë–©–ï–ù–ò–ô (–Ω–µ –∫–æ–º–∞–Ω–¥ –∏ –Ω–µ –∫–Ω–æ–ø–æ–∫)


@dp.message()
async def handle_unknown_message(message: Message):
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# üìå –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
